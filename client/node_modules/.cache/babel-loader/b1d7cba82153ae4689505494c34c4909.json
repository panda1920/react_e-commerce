{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebaseutils';\nimport ShopActionTypes from './shop.types';\nimport { fetchCollectionsSuccess, fetchColletionsFailiure } from './shop.actions';\nexport function* fetchCollectionAsync() {\n  yield console.log('Fired!!');\n\n  try {\n    const colletctionRef = firestore.collection('collection');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    put(fetchCollectionsFailure(error.message));\n  }\n\n  colletctionRef.get().then(snapshot => {\n    dispatch(fetchCollectionsSuccess(collections));\n  }).catch(error => {\n    dispatch(fetchCollectionsFailure(error.message));\n  });\n}\nexport function* fetchCollectionStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["C:/Myprojects/React/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","put","firestore","convertCollectionSnapshotToMap","ShopActionTypes","fetchCollectionsSuccess","fetchColletionsFailiure","fetchCollectionAsync","console","log","colletctionRef","collection","snapshot","collectionRef","get","collectionsMap","error","fetchCollectionsFailure","message","then","dispatch","collections","catch","fetchCollectionStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AAEA,SAASC,SAAT,EAAoBC,8BAApB,QAA0D,8BAA1D;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AAEA,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAN;;AAEA,MAAI;AACF,UAAMC,cAAc,GAAGR,SAAS,CAACS,UAAV,CAAqB,YAArB,CAAvB;AACA,UAAMC,QAAQ,GAAG,MAAMC,aAAa,CAACC,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMf,IAAI,CAACG,8BAAD,EAAiCS,QAAjC,CAAjC;AACAX,IAAAA,GAAG,CAACI,uBAAuB,CAACU,cAAD,CAAxB,CAAH;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACdf,IAAAA,GAAG,CAACgB,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAAH;AACD;;AAEDR,EAAAA,cAAc,CAACI,GAAf,GAAqBK,IAArB,CAA0BP,QAAQ,IAAI;AACpCQ,IAAAA,QAAQ,CAACf,uBAAuB,CAACgB,WAAD,CAAxB,CAAR;AACD,GAFD,EAEGC,KAFH,CAESN,KAAK,IAAI;AAChBI,IAAAA,QAAQ,CAACH,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAAR;AACD,GAJD;AAKD;AAED,OAAO,UAAUK,oBAAV,GAAiC;AACtC,QAAMxB,SAAS,CACbK,eAAe,CAACoB,uBADH,EAEbjB,oBAFa,CAAf;AAID","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\r\n\r\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebaseutils';\r\n\r\nimport ShopActionTypes from './shop.types';\r\nimport { fetchCollectionsSuccess, fetchColletionsFailiure } from './shop.actions';\r\n\r\nexport function* fetchCollectionAsync() {\r\n  yield console.log('Fired!!');\r\n\r\n  try {\r\n    const colletctionRef = firestore.collection('collection');\r\n    const snapshot = yield collectionRef.get();\r\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\r\n    put(fetchCollectionsSuccess(collectionsMap));\r\n  } catch (error) {\r\n    put(fetchCollectionsFailure(error.message));\r\n  }\r\n  \r\n  colletctionRef.get().then(snapshot => {\r\n    dispatch(fetchCollectionsSuccess(collections));\r\n  }).catch(error => {\r\n    dispatch(fetchCollectionsFailure(error.message));\r\n  })\r\n}\r\n\r\nexport function* fetchCollectionStart() {\r\n  yield takeEvery(\r\n    ShopActionTypes.FETCH_COLLECTIONS_START,\r\n    fetchCollectionAsync\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}