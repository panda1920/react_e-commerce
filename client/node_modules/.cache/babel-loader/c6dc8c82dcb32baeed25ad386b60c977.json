{"ast":null,"code":"import _objectSpread from \"C:\\\\Myprojects\\\\React\\\\crwn-clothing\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCqeXR3qEUXfxgsfO3RQ284wrP_UqBt_UI\",\n  authDomain: \"crwn-db-58082.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-58082.firebaseio.com\",\n  projectId: \"crwn-db-58082\",\n  storageBucket: \"crwn-db-58082.appspot.com\",\n  messagingSenderId: \"599570990831\",\n  appId: \"1:599570990831:web:4e4c640270fcfa6aa1bd1a\",\n  measurementId: \"G-M2R4EKSDDN\"\n};\nfirebase.initializeApp(config);\nexport async function createUserProfileDocument(userAuth, additionalData) {\n  if (!userAuth) return;\n  let userRef = firestore.doc(`users/${userAuth.uid}`);\n  let snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n    console.log(displayName);\n    console.log(email);\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n}\nexport async function addCollectionAndDocuments(collectionKey, objectsToAdd) {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  await batch.commit();\n}\nexport function convertCollectionSnapshotToMap(snapshot) {\n  const transformedCollection = snapshot.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n}\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // retrieve the current user's authInfo that is logged on to firestore\n\nexport function getCurrentUser() {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport default firebase;","map":{"version":3,"sources":["C:/Myprojects/React/crwn-clothing/src/firebase/firebaseutils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","console","log","set","error","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionSnapshotToMap","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","auth","getCurrentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCqeXR3qEUXfxgsfO3RQ284wrP_UqBt_UI\",\r\n  authDomain: \"crwn-db-58082.firebaseapp.com\",\r\n  databaseURL: \"https://crwn-db-58082.firebaseio.com\",\r\n  projectId: \"crwn-db-58082\",\r\n  storageBucket: \"crwn-db-58082.appspot.com\",\r\n  messagingSenderId: \"599570990831\",\r\n  appId: \"1:599570990831:web:4e4c640270fcfa6aa1bd1a\",\r\n  measurementId: \"G-M2R4EKSDDN\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport async function createUserProfileDocument(userAuth, additionalData) {\r\n  if (!userAuth) return;\r\n\r\n  let userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  let snapshot = await userRef.get();\r\n\r\n  if (!snapshot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n    console.log(displayName);\r\n    console.log(email);\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName, email, createdAt, ...additionalData\r\n      });\r\n    } catch (error) {\r\n      console.log('error creating user', error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n}\r\n\r\nexport async function addCollectionAndDocuments(collectionKey, objectsToAdd) {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n\r\n  const batch = firestore.batch();\r\n  objectsToAdd.forEach(obj => {\r\n    const newDocRef = collectionRef.doc()\r\n    batch.set(newDocRef, obj);\r\n  });\r\n\r\n  await batch.commit();\r\n}\r\n\r\nexport function convertCollectionSnapshotToMap(snapshot) {\r\n  const transformedCollection = snapshot.docs.map(doc => {\r\n    const { title, items } = doc.data();\r\n\r\n    return {\r\n      routeName: encodeURI( title.toLowerCase() ),\r\n      id: doc.id,\r\n      title,\r\n      items\r\n    };\r\n  });\r\n\r\n  return transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n    return accumulator;\r\n  }, {});\r\n}\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n// retrieve the current user's authInfo that is logged on to firestore\r\nexport function getCurrentUser() {\r\n  return new Promise((resolve, reject) => {\r\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n      unsubscribe();\r\n      resolve(userAuth);\r\n    }, reject);\r\n  });\r\n}\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: 'select_account' } );\r\n\r\nexport default firebase; "]},"metadata":{},"sourceType":"module"}