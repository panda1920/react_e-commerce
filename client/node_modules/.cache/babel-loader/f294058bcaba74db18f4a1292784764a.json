{"ast":null,"code":"import _objectSpread from \"C:\\\\Myprojects\\\\React\\\\crwn-clothing\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { takeLatest, put, all, call } from 'redux-saga/effects';\nimport userActionTypes from './user.types';\nimport { signinSuccess, signinFailure } from './user.action';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebaseutils';\nexport function* userRootSaga() {\n  yield all([call(googleSigninStart), call(emailSigninStart)]);\n}\nexport function* googleSigninStart() {\n  yield takeLatest(userActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle);\n}\nexport function* signInWithGoogle() {\n  try {\n    const _ref = yield auth.signInWithPopup(googleProvider),\n          userAuth = _ref.user;\n\n    yield signInWithUserAuth(userAuth);\n  } catch (error) {\n    yield put(signinFailure(error));\n  }\n}\nexport function* emailSigninStart() {\n  yield takeLatest(userActionTypes.EMAIL_SIGNIN_START, signInWithEmail);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const _ref2 = yield auth.signInWithEmailAndPassword(email, password),\n          userAuth = _ref2.user;\n\n    yield signInWithUserAuth(userAuth);\n  } catch (error) {\n    yield put(signinFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  try {\n    yield new Promise((resolve, reject) => {\n      const unsubscribe = auth.onAuthStateChanged(userAuth => {\n        unsubscribe();\n        if (!userAuth) return;\n      });\n    });\n  } catch (error) {}\n}\nexport function* isUserAuthenticated() {}\nexport function* signInWithUserAuth(userAuth) {\n  try {\n    const userRef = yield createUserProfileDocument(userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signinSuccess(_objectSpread({\n      id: userSnapshot.id\n    }, userSnapshot.data())));\n  } catch (error) {\n    yield put(signinFailure(error));\n  }\n}","map":{"version":3,"sources":["C:/Myprojects/React/crwn-clothing/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","userActionTypes","signinSuccess","signinFailure","auth","googleProvider","createUserProfileDocument","userRootSaga","googleSigninStart","emailSigninStart","GOOGLE_SIGNIN_START","signInWithGoogle","signInWithPopup","userAuth","user","signInWithUserAuth","error","EMAIL_SIGNIN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onCheckUserSession","Promise","resolve","reject","unsubscribe","onAuthStateChanged","isUserAuthenticated","userRef","userSnapshot","get","id","data"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACEC,aADF,EAEEC,aAFF,QAGO,eAHP;AAKA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,8BAAhE;AAEA,OAAO,UAAUC,YAAV,GAAyB;AAC9B,QAAMR,GAAG,CAAC,CACRC,IAAI,CAACQ,iBAAD,CADI,EAERR,IAAI,CAACS,gBAAD,CAFI,CAAD,CAAT;AAID;AAED,OAAO,UAAUD,iBAAV,GAA8B;AACnC,QAAMX,UAAU,CAACI,eAAe,CAACS,mBAAjB,EAAsCC,gBAAtC,CAAhB;AACD;AAED,OAAO,UAAUA,gBAAV,GAA6B;AAClC,MAAI;AAAA,iBACyB,MAAMP,IAAI,CAACQ,eAAL,CAAqBP,cAArB,CAD/B;AAAA,UACYQ,QADZ,QACMC,IADN;;AAEF,UAAMC,kBAAkB,CAACF,QAAD,CAAxB;AACD,GAHD,CAIA,OAAOG,KAAP,EAAc;AACZ,UAAMlB,GAAG,CAAEK,aAAa,CAACa,KAAD,CAAf,CAAT;AACD;AACF;AAED,OAAO,UAAUP,gBAAV,GAA6B;AAClC,QAAMZ,UAAU,CAACI,eAAe,CAACgB,kBAAjB,EAAqCC,eAArC,CAAhB;AACD;AAED,OAAO,UAAUA,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAX,CAA1B,EAA0D;AAC/D,MAAI;AAAA,kBACyB,MAAMjB,IAAI,CAACkB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAD/B;AAAA,UACYR,QADZ,SACMC,IADN;;AAEF,UAAMC,kBAAkB,CAACF,QAAD,CAAxB;AACD,GAHD,CAGE,OAAMG,KAAN,EAAa;AACb,UAAMlB,GAAG,CAAEK,aAAa,CAACa,KAAD,CAAf,CAAT;AACD;AACF;AAED,OAAO,UAAUO,kBAAV,GAA+B;AACpC,MAAI;AACF,UAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACnC,YAAMC,WAAW,GAAGvB,IAAI,CAACwB,kBAAL,CAAwBf,QAAQ,IAAI;AACtDc,QAAAA,WAAW;AACX,YAAI,CAACd,QAAL,EACE;AAGL,OANqB,CAApB;AAOH,KARK,CAAN;AASD,GAVD,CAUE,OAAMG,KAAN,EAAa,CAEd;AACF;AAED,OAAO,UAAUa,mBAAV,GAAgC,CAEtC;AAED,OAAO,UAAUd,kBAAV,CAA6BF,QAA7B,EAAuC;AAC5C,MAAI;AACF,UAAMiB,OAAO,GAAG,MAAMxB,yBAAyB,CAACO,QAAD,CAA/C;AACA,UAAMkB,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMlC,GAAG,CAAEI,aAAa;AAAG+B,MAAAA,EAAE,EAAEF,YAAY,CAACE;AAApB,OAA2BF,YAAY,CAACG,IAAb,EAA3B,EAAf,CAAT;AACD,GAJD,CAIE,OAAMlB,KAAN,EAAa;AACb,UAAMlB,GAAG,CAAEK,aAAa,CAACa,KAAD,CAAf,CAAT;AACD;AACF","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport userActionTypes from './user.types';\r\nimport {\r\n  signinSuccess,\r\n  signinFailure,\r\n} from './user.action';\r\n\r\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebaseutils';\r\n\r\nexport function* userRootSaga() {\r\n  yield all([\r\n    call(googleSigninStart),\r\n    call(emailSigninStart),\r\n  ]);\r\n}\r\n\r\nexport function* googleSigninStart() {\r\n  yield takeLatest(userActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle);\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n  try {\r\n    const { user: userAuth } = yield auth.signInWithPopup(googleProvider);\r\n    yield signInWithUserAuth(userAuth);\r\n  }\r\n  catch (error) {\r\n    yield put( signinFailure(error) );\r\n  }\r\n}\r\n\r\nexport function* emailSigninStart() {\r\n  yield takeLatest(userActionTypes.EMAIL_SIGNIN_START, signInWithEmail);\r\n}\r\n\r\nexport function* signInWithEmail({ payload: {email, password} }) {\r\n  try {\r\n    const { user: userAuth } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield signInWithUserAuth(userAuth);\r\n  } catch(error) {\r\n    yield put( signinFailure(error) );\r\n  }\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n  try {\r\n    yield new Promise((resolve, reject) => {\r\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n          unsubscribe();\r\n          if (!userAuth)\r\n            return;\r\n\r\n          \r\n      });\r\n    })\r\n  } catch(error) {\r\n\r\n  }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n  \r\n}\r\n\r\nexport function* signInWithUserAuth(userAuth) {\r\n  try {\r\n    const userRef = yield createUserProfileDocument(userAuth);\r\n    const userSnapshot = yield userRef.get();\r\n    yield put( signinSuccess({ id: userSnapshot.id, ...userSnapshot.data()}) );\r\n  } catch(error) {\r\n    yield put( signinFailure(error) );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}